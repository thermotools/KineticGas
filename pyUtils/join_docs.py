"""
Scripts to generate readme's and wiki-documentation files by joining various markdown files in KineticGas/docs/markdown

Intent: Several "submodules" of documentation are used both in the wiki, the main github README, the pypi README and
        possibly other places. Each of these "submodules" should be contained in a single markdown file in the
        thermopack/doc/markdown directory. Each function in this file generates a single markdown file by joining
        the appropriate submodules, and prepending the header generated by the get_header(files) function.

Usage: To add new documentation, create a new markdown file in thermopoack/doc/markdown, and add the filename
        (sans the file ending) to the appropriate `files` lists in the functions in this file.
"""
import os
from datetime import datetime
import re, warnings
from tools import write_file

MARKDOWN_DIR = os.path.dirname(__file__) + '/../docs/'
KINETICGAS_ROOT = os.path.dirname(__file__) + '/..'

def print_finished_report(header, out_file_path):
    printcolwidth = 100
    print('-' * printcolwidth)
    print('Wrote documentation file with the header :')
    print('#' * printcolwidth)
    print(header)
    print('#' * printcolwidth)
    print('-' * printcolwidth)
    print('To:', out_file_path)
    print('-' * printcolwidth)
    print()

def repair_links(filestr):
    """
    Because the markdown files used to generate the GH pages use relative paths, we need to prepend the appropriate
    url when making the Readme.
    """
    pattern = r"\]\((.*?)\.html\)"
    replacement = r"](https://thermotools.github.io/KineticGas/vcurrent/\1.html)"
    return re.sub(pattern, replacement, filestr)

def format_no_html(file):
    """
    Markdown files that are intended to be compiled to html may contain some syntax that is unfriendly to e.g.
    pages intended to render GitHub flavoured markdown. Specifially, the title is in the page metadata, not as a
    header. This function reads the file, and returns a string formatted to be friendly for "pure" markdown pages
    without html-templates.

    Args:
        file (file handle) : The file to read
    Returns
        str : The contents of the file, formatted to be nice.
    """
    line = file.readline()
    if '---' not in line:
        return line + file.read()
    metadata = line + '\n'
    line = file.readline()
    title = ''
    description = ''

    while '---' not in line:
        if 'title' in line:
            title = line.split(':')[-1].strip()
        elif 'description' in line:
            description = line.split(':')[-1].strip()

        metadata += line
        line = file.readline()

    line = file.readline() # Move past the '---' at the end of the header section.

    if title:
        main_header = title
    elif description:
        main_header = description
    else:
        main_header = ''
        warnings.warn(f'File with metadata : {metadata} \nDid not contain a title or description.', SyntaxWarning, stacklevel=2)

    outstr = f'# {main_header}\n'
    return outstr + line + repair_links(file.read())

def gen_file_str(files):
    out_file_str = ''
    for file in files:
        file_path = MARKDOWN_DIR + file + '.md'

        with open(file_path, 'r') as in_file:
            out_file_str += format_no_html(in_file) + '\n\n'

    return out_file_str

def get_header(files):
    header = '<!--- \n'
    header += 'Generated at: ' + datetime.today().isoformat() + '\n'
    header += 'This is an auto-generated file, generated using the script at KineticGas/docs/join_docs.py\n'
    header += 'The file is created by joining the contents of the files\n'
    header += '    KineticGas/docs/markdown/\n'
    for fname in files:
        header += '    ' * 2 + fname + '.md\n'
    header += '--->\n'
    return header

def write_pypi_readme():
    files = ['readme_parts/header', 'readme_parts/toc_pypi', 'metapages/cite_acknowl_licence', 'readme_parts/pypi_structure',
             'vCurrent/getting_started_py', 'vCurrent/fluid_identifiers']
    header = get_header(files)

    out_file_str = header + gen_file_str(files)
    out_file_path = KINETICGAS_ROOT + '/pykingas/README.md'
    write_file(out_file_path, out_file_str)

def write_github_readme():
    files = ['readme_parts/header', 'readme_parts/toc_github', 'metapages/cite_acknowl_licence', 'vCurrent/source_build',
            'vCurrent/getting_started_py', 'vCurrent/getting_started_cpp', 'vCurrent/advanced', 'vCurrent/structure',
             'vCurrent/fluid_identifiers']
    header = get_header(files)

    out_file_str = header + gen_file_str(files)
    out_file_path = KINETICGAS_ROOT + '/README.md'
    write_file(out_file_path, out_file_str)

if __name__ == '__main__':
    write_pypi_readme()
    write_github_readme()

